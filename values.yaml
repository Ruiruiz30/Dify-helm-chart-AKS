# Dify Helm Chart 配置文件
# 本文件包含所有可配置的选项，用于自定义 Dify 在 Kubernetes 中的部署
#
# 配置说明：
# 1. 全局配置 (global): 影响整个部署的配置项
#    - host: 访问域名或 IP 地址
#    - port: 服务端口
#    - enableTLS: 是否启用 TLS
#    - image: 镜像配置
#    - edition: 部署版本
#    - storageType: 存储类型
#
# 2. 组件配置: 各个组件的独立配置
#    - frontend: 前端服务配置
#    - api: API 服务配置
#    - worker: 工作节点配置
#    - postgresql: 数据库配置
#    - redis: 缓存配置
#    - minio: 对象存储配置
#    - vector-db: 向量数据库配置
#
# 安全建议：
# 1. 生产环境建议启用 TLS
# 2. 使用 Kubernetes Secrets 管理敏感信息
# 3. 配置适当的资源限制和请求
# 4. 启用网络策略
#
# 高可用建议：
# 1. 配置多个副本
# 2. 使用 Pod 反亲和性
# 3. 配置适当的资源限制
# 4. 使用持久化存储
#
# 存储建议：
# 1. 生产环境建议使用外部存储服务
# 2. 配置适当的存储类
# 3. 设置存储大小限制
#
# 向量数据库建议：
# 1. 根据需求选择合适的向量数据库
# 2. 配置适当的资源限制
# 3. 考虑使用托管服务

# Default values for dify.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


# volume and volumeMounts would be injected to api and worker
volumes: []

volumeMounts: []

nameOverride: ""
fullnameOverride: ""

global:
  # 主机配置
  # 支持两种配置方式：
  # 1. IP 地址：适用于内网访问，如 "10.104.179.207"
  # 2. 域名：适用于公网访问，如 "dify.your-domain.com"
  # 注意：使用域名时需要确保 DNS 解析正确，并配置相应的 TLS 证书
  host: "10.104.179.207"  # 使用前端LoadBalancer IP作为主机名
  
  # 端口配置
  # 通常不需要设置，使用默认端口
  # 如需自定义端口，请确保与 LoadBalancer 配置一致
  port: ""  # 不需要设置端口
  
  # TLS 配置
  # - false: 适用于内网访问或 HTTP 访问
  # - true: 适用于公网访问，需要配置 TLS 证书
  enableTLS: false  # 内网访问不需要 TLS
  image:
    tag: "1.4.1"
  edition: "SELF_HOSTED"
  storageType: "s3"  # 使用 S3 存储
  vectorStore: "weaviate"  # 使用 Weaviate 作为向量存储
  # the following extra configs would be injected into:
  # * frontend
  # * api
  # * worker
  # * plugin_daemon
  extraEnvs: []
  extraBackendEnvs:
    - name: SECRET_KEY
      value: "PleaseReplaceThisToYourSecretOrUse"
    - name: LOG_LEVEL
      value: "INFO"
    - name: DEPLOY_ENV
      value: "PRODUCTION"
    - name: CHECK_UPDATE_URL
      value: "https://updates.dify.ai"
    - name: OPENAI_API_BASE
      value: "https://api.openai.com/v1"
    - name: MIGRATION_ENABLED
      value: "true"
    - name: ENABLE_WEBSITE_JINAREADER
      value: "true"
    - name: ENABLE_WEBSITE_FIRECRAWL
      value: "true"
    - name: ENABLE_WEBSITE_WATERCRAWL
      value: "true"
  # Provide extra labels for all deployments and related pods of this chart
  labels: {}

ingress:
  enabled: false  # 暂时禁用，使用更简单的nginx方案
  className: "nginx"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

frontend:
  replicaCount: 1

  image:
    repository: langgenius/dify-web
    pullPolicy: IfNotPresent
    tag: "1.4.1"

  envs:
    - name: MARKETPLACE_API_URL
      value: 'https://marketplace.dify.ai'
    - name: MARKETPLACE_URL
      value: 'https://marketplace.dify.ai'
  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 80

  containerPort: 3000

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "2000m"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}
  livenessProbe:
    httpGet:
      path: /apps
      port: http
      httpHeaders:
      - name: accept-language
        value: en
    initialDelaySeconds: 3
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    httpGet:
      path: /apps
      port: http
      httpHeaders:
      - name: accept-language
        value: en
    initialDelaySeconds: 3
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2


api:
  replicaCount: 1

  image:
    repository: langgenius/dify-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.4.1"
  envs:
  # sandbox
  - name: CODE_MAX_NUMBER
    value: "9223372036854775807"
  - name: CODE_MIN_NUMBER
    value: "-9223372036854775808"
  - name: CODE_MAX_STRING_LENGTH
    value: "80000"
  - name: TEMPLATE_TRANSFORM_MAX_LENGTH
    value: "80000"
  - name: CODE_MAX_STRING_ARRAY_LENGTH
    value: "30"
  - name: CODE_MAX_OBJECT_ARRAY_LENGTH
    value: "30"
  - name: CODE_MAX_NUMBER_ARRAY_LENGTH
    value: "1000"
  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 5001

  containerPort: 5001

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "2000m"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 10

worker:
  replicaCount: 1

  image:
    repository: langgenius/dify-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.4.1"

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  envs: []  # 移除重复的S3_BUCKET_NAME环境变量

  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # livenessprobe for worker, default no probe
  livenessProbe: {}
  readinessProbe: {}

sandbox:
  enabled: true
  replicaCount: 1
  # please change to avoid abuse
  apiKey: "dify-sandbox"
  # prefer to use secret
  apiKeySecret: ""
  image:
    repository: langgenius/dify-sandbox
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.2.10"
  config:
    # python_requirements: |
    #   numpy==1.20.3
    #   scipy==1.6.3
    python_requirements: ""

  envs:
  - name: GIN_MODE
    value: "release"
  - name: WORKER_TIMEOUT
    value: "15"
  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8194

  containerPort: 8194


  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}


  readinessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 1
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  livenessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2

# 新增plugin_daemon服务
plugin_daemon:
  enabled: true
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  # plugin daemon depends on persistence volume
  # setting updateStrategy to recreate would make it possible to restart it.
  updateStrategy:
    type: Recreate
  # please change to avoid abuse
  serverKey: "lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi"
  # prefer to use secret
  serverKeySecret: ""
  # please change to avoid abuse
  difyInnerApiKey: "QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1"
  # prefer to use secret
  difyInnerApiKeySecret: ""
  image:
    repository: langgenius/dify-plugin-daemon
    pullPolicy: IfNotPresent
    tag: "0.1.1-local"

  envs:
    - name: MAX_PLUGIN_PACKAGE_SIZE
      value: "52428800"
    - name: PPROF_ENABLED
      value: "false"
    - name: FORCE_VERIFYING_SIGNATURE
      value: "true"
    - name: PLUGIN_REMOTE_INSTALLING_HOST
      value: "0.0.0.0"
    - name: PLUGIN_REMOTE_INSTALLING_PORT
      value: "5003"
    - name: PLUGIN_WORKING_PATH
      value: "/app/storage"

  service:
    type: ClusterIP
    port: 5002

  containerPort: 5002

  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "2048Mi"
      cpu: "2000m"

  nodeSelector: {}

  tolerations: []

  affinity: {}

  persistence:
    enabled: true
    accessMode: ReadWriteMany
    size: 20Gi
    storageClass: azurefile

# 存储配置
storage:
  type: "s3"
  s3:
    endpoint: "http://dify-minio:9000"
    region: "us-east-1"
    bucket: "difyai"
    accessKey: "minioadmin"
    secretKey: "minioadmin"
    useAwsManagedIam: false
  azure_blob:
    accountName: ""
    accountKey: ""
    containerName: ""
    accountUrl: ""
  local:
    path: "/app/storage"

# 数据库配置
postgresql:
  embedded: true
  auth:
    username: "postgres"
    password: "difyai123456"
    database: "dify"
  primary:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# Redis 配置
redis:
  embedded: true
  auth:
    password: "difyai123456"
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# Weaviate 配置 (作为子chart)
weaviate:
  enabled: true  # 启用weaviate子chart
  fullnameOverride: dify-weaviate  # 设置服务名
  image:
    tag: "1.26.1"  # 指定版本
  authentication:
    apikey:
      enabled: true
      allowed_keys:
        - "WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih"
      users:
        - "hello@dify.ai"
  authorization:
    admin_list:
      enabled: true
      users:
        - "hello@dify.ai"
  persistence:
    enabled: true
    size: 10Gi
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "2000m"
  service:
    type: ClusterIP
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    loadBalancerIP: "10.104.179.209"
  env:
    QUERY_DEFAULTS_LIMIT: 25
    AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: false
    DEFAULT_VECTORIZER_MODULE: none
    CLUSTER_HOSTNAME: node1
    AUTHENTICATION_APIKEY_ENABLED: true
    AUTHENTICATION_APIKEY_ALLOWED_KEYS: "WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih"
    AUTHENTICATION_APIKEY_USERS: "hello@dify.ai"
    AUTHORIZATION_ADMINLIST_ENABLED: true
    AUTHORIZATION_ADMINLIST_USERS: "hello@dify.ai"

# Qdrant 配置
qdrant:
  embedded: false
  persistence:
    enabled: true
    size: 10Gi
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "2000m"
  auth:
    enabled: true
    apiKey: "difyai123456"

# 持久化存储配置
persistence:
  enabled: true
  storageClass: ""  # 使用默认的 storageClass
  size: 10Gi
  accessMode: ReadWriteOnce

# 自动扩缩容配置
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# MinIO 配置
minio:
  embedded: true  # 启用内置的 minio
  auth:
    rootUser: "minioadmin"
    rootPassword: "minioadmin"
  persistence:
    enabled: true
    size: 10Gi
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  service:
    type: ClusterIP
    port: 9000
  console:
    enabled: true
    service:
      type: ClusterIP
      port: 9001
